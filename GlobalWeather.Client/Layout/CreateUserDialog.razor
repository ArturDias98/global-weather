@using System.Text
@using GlobalWeather.Client.Services
@using GlobalWeather.Shared.Contracts

<MudDialog>
    <DialogContent>
        <MudForm @ref="_form">
            <MudStack>
                <MudTextField T="string"
                              Label="Email"
                              Required="true"
                              RequiredError="O email é obrigatório"
                              @bind-Value="_email"
                              InputType="InputType.Email"
                              Variant="Variant.Outlined">
                </MudTextField>
                <MudTextField T="string"
                              Label="Senha"
                              Required="true"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))"
                              RequiredError="A senha é obrigatória"
                              @bind-Value="_password"
                              InputType="InputType.Password"
                              Variant="Variant.Outlined">
                </MudTextField>
                <MudTextField T="string"
                              Label="Senha"
                              HelperText="Repita a senha"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, string>(PasswordMatch))"
                              Variant="Variant.Outlined">
                </MudTextField>
            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudStack Row="true"
                  Wrap="Wrap.Wrap">
            <MudButton Style="text-transform: none"
                       OnClick="() => Dialog.Close()">
                Cancelar
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Info"
                       Style="text-transform: none"
                       OnClick="OnAdd">
                @if (_loading)
                {
                    <MudProgressCircular Indeterminate="true"
                                         Size="Size.Small">
                    </MudProgressCircular>
                }
                else
                {
                    <MudText>Confirmar</MudText>
                }
            </MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

@code {
    private MudForm _form = null!;
    private string _email = string.Empty;
    private string _password = string.Empty;
    private bool _loading;

    private string PasswordMatch(string password)
    {
        return _password != password
            ? "As senhas devem ser iguais"
            : string.Empty;
    }

    private static IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "A senha é obrigatória";
            yield break;
        }

        if (pw.Length < 6)
        {
            yield return "A senha deve conter no mínimo 6 caracteres";
        }
    }

    private async Task OnAdd()
    {
        await _form.Validate();

        if (!_form.IsValid)
        {
            return;
        }

        _loading = true;
        StateHasChanged();

        var result = await UserService.CreateUserAsync(
            _email,
            _password,
            Token);

        if (result.Success)
        {
            await AuthService.AuthenticateAsync(
                result.Result!,
                Token);

            Dialog.Close();
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;

            var message = new StringBuilder()
                .Append("<p>Não foi possível cadastrar o usuário</p>")
                .Append("<ul>");

            foreach (var resultError in result.Errors)
            {
                message.Append($"<li>{resultError}</li>");
            }

            message.Append("</ul>");

            Snackbar.Add(new MarkupString(message.ToString()), Severity.Error);
        }

        _loading = false;
        StateHasChanged();
    }

    [Inject] private IUserService UserService { get; set; } = null!;
    [Inject] private ISnackbar Snackbar { get; set; } = null!;
    [Inject] private AuthService AuthService { get; set; } = null!;

    [Parameter] public CancellationToken Token { get; set; }
    [CascadingParameter] private MudDialogInstance Dialog { get; set; } = null!;
}