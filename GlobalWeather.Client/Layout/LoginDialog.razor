@using GlobalWeather.Client.Services
@using GlobalWeather.Shared.Contracts

<MudDialog>
    <DialogContent>
        <MudForm @ref="_form">
            <MudStack>
                <MudTextField T="string"
                              Label="Email"
                              Required="true"
                              RequiredError="Informe um email válido"
                              @bind-Value="_email"
                              InputType="InputType.Email"
                              Variant="Variant.Outlined">
                </MudTextField>
                <MudTextField T="string"
                              Label="Senha"
                              Required="true"
                              RequiredError="Informe a senha"
                              @bind-Value="_password"
                              InputType="InputType.Password"
                              Variant="Variant.Outlined">
                </MudTextField>
                <MudButton Variant="Variant.Text"
                           Style="text-transform: none"
                           Class="ml-auto"
                           Color="Color.Info"
                           OnClick="OnCreate">
                    Criar conta
                </MudButton>
            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudStack Row="true"
                  Wrap="Wrap.Wrap">
            <MudButton Style="text-transform: none"
                       OnClick="() => Dialog.Close()">
                Cancelar
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Info"
                       Style="text-transform: none"
                       OnClick="OnLogin"
                       Disabled="_loading">
                @if (_loading)
                {
                    <MudProgressCircular Indeterminate="true"
                                         Size="Size.Small">
                    </MudProgressCircular>
                }
                else
                {
                    <MudText>Confirmar</MudText>
                }
            </MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

@code {
    private MudForm _form = null!;
    private string _email = string.Empty;
    private string _password = string.Empty;
    private bool _loading;

    private async Task OnLogin()
    {
        await _form.Validate();

        if (!_form.IsValid)
        {
            return;
        }

        _loading = true;
        StateHasChanged();

        var result = await UserService.LoginAsync(
            _email,
            _password,
            Token);

        if (result.Success)
        {
            await AuthService.AuthenticateAsync(
                result.Result!,
                Token);

            Dialog.Close();
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            Snackbar.Add(
                "Não foi possível realizar login. Verifique email e senha",
                Severity.Error);
        }

        _loading = false;
        StateHasChanged();
    }

    private async Task OnCreate()
    {
        Dialog.Close();

        var options = new DialogOptions()
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true
        };

        await DialogService.ShowAsync<CreateUserDialog>(
            "Criar usuário",
            options);
    }

    [Inject] private IUserService UserService { get; set; } = null!;
    [Inject] private ISnackbar Snackbar { get; set; } = null!;
    [Inject] private AuthService AuthService { get; set; } = null!;
    [Inject] private IDialogService DialogService { get; set; } = null!;

    [Parameter] public CancellationToken Token { get; set; }
    [CascadingParameter] private MudDialogInstance Dialog { get; set; } = null!;
}